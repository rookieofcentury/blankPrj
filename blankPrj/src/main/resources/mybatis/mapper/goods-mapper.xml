<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goodsMapper">

	<!-- SELECT 카테고리 List -->
	<select id="selectCategoryList" resultType="java.util.HashMap">
		SELECT NO, NAME FROM GOODS_CATEGORY
	</select>
	
	<!-- SELECT 기획전 List -->
	<select id="selectExhibitionList" resultType="java.util.HashMap">
		SELECT NO, TITLE FROM GOODS_EXHIBITION
	</select>

	<!-- INSERT GOODS 정보, GOODS 사진 -->
	<update id="insertGoods">

		INSERT ALL
			INTO GOODS
				(
					NO ,
					CATEGORY ,
					NAME ,
					PRICE ,
					STOCK ,
					CONTENT ,
					ENROLL_DATE ,
					EXHIBITION ,
					DELETE_YN
				)
				VALUES
				(
					GET_SEQ_NO('SEQ_GOODS_NO') ,
					#{goods.category} ,
					#{goods.name} ,
					#{goods.price} ,
					#{goods.stock} ,
					#{goods.content} ,
					SYSDATE ,
					#{goods.exhibition} ,
					'N'
				)
			<foreach collection="thumbnail" item="item" close="SELECT * FROM DUAL" separator=" ">
			INTO GOODS_ATTACHMENT
				(
					NO ,
					GOODS ,
					FILE_NAME ,
					ENROLL_DATE
				)
			VALUES
				(
					GET_SEQ_NO('SEQ_GOODS_ATTACHMENT_NO') ,
					GET_SEQ_CURR_NO('SEQ_GOODS_NO') ,
					#{item} ,
					SYSDATE
				)
			</foreach>

	</update>
	
	<!-- INSERT GOODS 리뷰 -->
	<insert id="insertReview">
	
		INSERT INTO GOODS_REVIEW
		(
			NO ,
			GOODS ,
			WRITER ,
			SCORE ,
			CONTENT ,
			ENROLL_DATE ,
			DELETE_YN
		)
		VALUES
		(
			SEQ_GOODS_REVIEW_NO.NEXTVAL ,
			#{goods} ,
			#{writer} ,
			#{score} ,
			#{content} ,
			SYSDATE ,
			'N'
		)
	
	</insert>
	
	<select id="goodsCnt" resultType="int">
		SELECT COUNT(*) FROM GOODS G
		WHERE DELETE_YN = 'N'
		<if test=" keyword != null and keyword != '' ">
			AND ${category} LIKE '%${keyword}%'
		</if>
	</select>
	
	<!-- SELECT ADMIN GOODS LIST -->
	<select id="selectAdminGoodsList" resultType="com.blank.app.goods.vo.GoodsVo">
		SELECT
			G.NO ,
			C.NAME AS CATEGORY ,
			G.NAME ,
			G.PRICE ,
			G.STOCK ,
			G.CONTENT ,
			G.ENROLL_DATE ,
			E.TITLE AS EXHIBITION ,
			G.DELETE_YN
		FROM GOODS G
		INNER JOIN GOODS_CATEGORY C
			ON C.NO = G.CATEGORY
		LEFT OUTER JOIN GOODS_EXHIBITION E
			ON E.NO = G.EXHIBITION
		WHERE G.DELETE_YN = 'N'
		<if test=" keyword != null and keyword != '' ">
			AND ${category} LIKE '%${keyword}%'
		</if>
		ORDER BY NO DESC
	</select>
	
	<select id="findThumbnail" resultType="String">
		SELECT FILE_NAME
        FROM GOODS_ATTACHMENT
        WHERE GOODS = #{no}
	</select>
	
	<select id="detail" resultType="com.blank.app.goods.vo.GoodsVo">
		SELECT
			G.NO ,
			C.NAME AS CATEGORY ,
			G.NAME ,
			G.PRICE ,
			G.STOCK ,
			G.CONTENT ,
			G.ENROLL_DATE ,
			E.TITLE AS EXHIBITION ,
			G.DELETE_YN,
            (SELECT COUNT(*) FROM GOODS_REVIEW WHERE GOODS = #{no}) AS REVIEW_CNT,
            (SELECT TRUNC(AVG(SCORE),1)/2 FROM GOODS_REVIEW WHERE GOODS = #{no}) AS REVIEW_SCORE
		FROM GOODS G
		INNER JOIN GOODS_CATEGORY C
			ON C.NO = G.CATEGORY
		LEFT OUTER JOIN GOODS_EXHIBITION E
			ON E.NO = G.EXHIBITION
		WHERE G.NO = #{no}
	</select>
	
	<update id="deleteGoods">
		UPDATE GOODS
		SET
			DELETE_YN = 'Y'
		WHERE NO = #{no}
	</update>
	
	<update id="editGoods">
		UPDATE GOODS
		SET 
			CATEGORY = #{category},
			NAME = #{name},
			PRICE = #{price},
			STOCK = #{stock},
			CONTENT = #{content},
			EXHIBITION = #{exhibition}
		WHERE NO = #{no}
	</update>
	
	<update id="insertThumbnail">
		INSERT ALL
		<foreach collection="thumbnail" item="item" close="SELECT * FROM DUAL" separator=" ">
			INTO GOODS_ATTACHMENT
				(
					NO ,
					GOODS ,
					FILE_NAME ,
					ENROLL_DATE
				)
			VALUES
				(
					GET_SEQ_NO('SEQ_GOODS_ATTACHMENT_NO') ,
					#{no} ,
					#{item} ,
					SYSDATE
				)
		</foreach>
	</update>
	
	<delete id="deleteThumbnail" parameterType="java.util.ArrayList">
		DELETE FROM GOODS_ATTACHMENT
		WHERE
		<foreach collection="array" item="item" separator="or">
			FILE_NAME = #{item}
		</foreach>
	</delete>
	
	<!-- 굿즈 메인 랜덤 8 개 출력 -->
	<select id="mainGoodsList" resultType="com.blank.app.goods.vo.GoodsVo">
		SELECT * FROM
		(SELECT
			G.NO ,
			C.NAME AS CATEGORY ,
			G.NAME ,
			G.PRICE ,
			G.STOCK ,
			G.CONTENT ,
			G.ENROLL_DATE ,
			E.TITLE AS EXHIBITION ,
			G.DELETE_YN
		FROM GOODS G
		INNER JOIN GOODS_CATEGORY C
			ON C.NO = G.CATEGORY
		LEFT OUTER JOIN GOODS_EXHIBITION E
			ON E.NO = G.EXHIBITION
		WHERE G.DELETE_YN = 'N'
		ORDER BY DBMS_RANDOM.RANDOM())
		<![CDATA[WHERE ROWNUM <= 8]]>
	</select>
	
	<!-- 장바구니 목록 정보 조회 -->
	<select id="getCartList" resultType="com.blank.app.goods.vo.CartVo">
		SELECT NO, NAME, PRICE FROM GOODS
		WHERE
		<foreach collection="list" item="item" separator="or">
			NO = #{item}
		</foreach>
	</select>
	
	<!-- 결제 완료 후 주문건 넣기 -->
	<update id="insertOrder">
		INSERT ALL
			INTO GOODS_PAYMENT VALUES
				(
					SEQ_GOODS_PAYMENT_NO.NEXTVAL,
					#{pay.consumer},
					#{pay.price},
					#{pay.delivery},
					#{pay.usepoint},
					#{pay.totalprice},
					#{pay.payMethod},
					#{pay.payment},
					#{pay.payDate},
					#{pay.receiptUrl},
					#{pay.status}
				)
			INTO GOODS_DELIVERY VALUES
				(
					SEQ_GOODS_PAYMENT_NO.NEXTVAL,
					#{pay.name},
					#{pay.phone},
					#{pay.address1},
					#{pay.address2},
					#{pay.address3},
					#{pay.message}
				)
		<foreach collection="orderList" item="item" close="SELECT * FROM DUAL" separator=" ">
			INTO GOODS_ORDER VALUES (GET_SEQ_NO('SEQ_GOODS_ORDER_NO'), SEQ_GOODS_PAYMENT_NO.NEXTVAL, #{item.no}, #{item.cnt})
		</foreach>
	</update>
	
	<!-- 결제할 때 사용한 point만큼 차감 -->
	<update id="updatePoint">
		UPDATE MEMBER SET POINT = POINT - ${usepoint} WHERE NO = #{consumer}
	</update>
	
	<!-- 결제 내역 번호로 결제 내역 조회 -->
	<select id="selectPaymentVoByNo" resultType="com.blank.app.goods.vo.PaymentVo">
		SELECT 
			    P.NO,
			    P.CONSUMER,
			    P.PRICE,
			    P.DELIVERY,
			    P.USEPOINT,
			    P.TOTALPRICE,
			    P.PAY_METHOD,
			    P.PAYMENT,
			    P.PAY_DATE,
			    P.RECEIPT_URL,
			    P.STATUS,
			    D.NAME,
			    D.PHONE,
			    D.ADDRESS1,
			    D.ADDRESS2,
			    D.ADDRESS3,
			    D.MESSAGE
			FROM GOODS_PAYMENT P
			INNER JOIN GOODS_DELIVERY D
			ON P.NO = D.NO
		WHERE
		<if test=" no != null and no != '' ">
			P.NO = #{no}
		</if>
		<if test=" payDate != null and payDate != '' and consumer != null and consumer != '' ">
			P.PAY_DATE = #{payDate} AND P.CONSUMER = #{consumer}
		</if>
	</select>
	
	<!-- 내가 결제한 모든 결제 내역 조회 -->
	<select id="selectPaymentVoListByNo" resultType="com.blank.app.goods.vo.PaymentVo">
		SELECT * FROM GOODS_PAYMENT
		WHERE CONSUMER = #{consumer}
	</select>
	
	<!-- 굿즈 넘버로 리뷰 리스트 가지고 오기! -->
	<select id="selectReviewListbyGNo" resultType="com.blank.app.goods.vo.ReviewVo">
		SELECT
            R.NO,
            R.GOODS,
            M.NICK AS WRITER,
            R.SCORE,
            R.CONTENT,
            SUBSTR(R.ENROLL_DATE, 1, 14) AS ENROLL_DATE,
            R.DELETE_YN,
            H.COUNT AS "LIKE"
        FROM GOODS_REVIEW R
        INNER JOIN MEMBER M
        ON M.NO = R.WRITER
        LEFT OUTER JOIN (SELECT NO, COUNT(*) AS COUNT FROM GOODS_REVIEW_HEART GROUP BY NO) H ON R.NO = H.NO
		WHERE GOODS = #{no}
		<if test=" mno != null and mno != '' ">
		AND M.NO = #{mno}
		</if>		
		<if test=" standard != null and standard == 'popular' ">
		ORDER BY COUNT DESC NULLS LAST
		</if>
		<if test=" standard != null and standard == 'new' ">
		ORDER BY ENROLL_DATE DESC 
		</if>
		<if test=" standard != null and standard == 'high' ">
		ORDER BY SCORE DESC
		</if>
		<if test=" standard != null and standard == 'low' ">
		ORDER BY SCORE
		</if>
	</select>
	
	<select id="getIsLikeLm" resultType="String">
		SELECT COUNT(*) FROM GOODS_REVIEW_HEART WHERE NO = #{vo.no} AND M_NO = #{mno}
	</select>
	
	<!-- 이 굿즈 번호로 조회했을 때 리뷰 몇 개나 있나요? -->
	<select id ="selectReviewCntbyGNo" resultType="int">
		SELECT COUNT(*) FROM GOODS_REVIEW
		WHERE GOODS = #{no}
	</select>
	
	<!-- 이 굿즈 번호로 조회했을 때 리뷰 몇 개나 있고, 평균 점수는 얼마인가요? -->
	<select id="selectTotalListbyGNo" resultType="java.util.HashMap">
		SELECT COUNT(*) AS REVIEW_CNT, TRUNC(AVG(SCORE),1)/2 AS REVIEW_SCORE
		FROM GOODS_REVIEW
		WHERE GOODS = #{no}
	</select>
	
	<!-- 리뷰 좋아요 추가 -->
	<insert id="insertReviewLike">
		INSERT INTO GOODS_REVIEW_HEART
		VALUES
			(#{no}, #{mno})
	</insert>
	
	<!-- 리뷰 좋아요 삭제 -->
	<delete id="deleteReviewLike">
		DELETE FROM GOODS_REVIEW_HEART
		WHERE NO = #{no} AND M_NO = #{mno}
	</delete>
	
	<!-- 회원번호로 주소 찾기 -->
	<select id="selectAddressByNo" resultType="java.util.HashMap">
		SELECT ADDR_NO AS ADDRESS1, ADDR AS ADDRESS2
		FROM ADDRESS
		WHERE M_NO = #{no}
	</select>
	
	<select id="searchGoodsList" resultType="com.blank.app.goods.vo.GoodsVo">
		SELECT
			G.NO ,
			C.NAME AS CATEGORY ,
			G.NAME ,
			G.PRICE ,
			G.STOCK ,
			G.CONTENT ,
			G.ENROLL_DATE ,
			E.TITLE AS EXHIBITION ,
			G.DELETE_YN
		FROM GOODS G
		INNER JOIN GOODS_CATEGORY C
			ON C.NO = G.CATEGORY
		LEFT OUTER JOIN GOODS_EXHIBITION E
			ON E.NO = G.EXHIBITION
		WHERE G.DELETE_YN = 'N'
		<if test=" category != null and category != '' ">
			AND C.NO = #{category}
		</if>
		<if test=" keyword != null and keyword != '' ">
			AND G.NAME LIKE '%${keyword}%'
		</if>
		<if test=" standard != null and standard == 'new' ">
			ORDER BY G.ENROLL_DATE DESC 
		</if>
		<if test=" standard != null and standard == 'high' ">
			ORDER BY G.PRICE DESC
		</if>
		<if test=" standard != null and standard == 'low' ">
			ORDER BY G.PRICE
		</if>
	</select>
	
	<select id="searchListCount" resultType="int">
		SELECT COUNT(*) FROM GOODS G
		WHERE DELETE_YN = 'N'
		<if test=" category != null and category != '' ">
			AND CATEGORY = #{category}
		</if>
		<if test=" keyword != null and keyword != '' ">
			AND NAME LIKE '%${keyword}%'
		</if>
	</select>
	
</mapper>